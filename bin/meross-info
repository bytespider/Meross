const { createLogger, format, transports, config } = require('winston');
const { combine, colorize, cli } = format;
const { deviceInformation, deviceWifiList } = require('../dist/api.js');
const { base64, verboseLogLevel, computePassword } = require('../dist/util.js');

exports.command = 'info [options]';
exports.describe = 'Get information about compatable Meross smart device';
exports.builder = (program) => {
  program.option('ip', {
    describe: 'IP address of device you wish to connect to',
    default: '10.10.10.1',
  });
  program.option('key', {
    alias: 'k',
    describe: 'Shared key for generating signatures',
    default: '',
  });
  program.option('include-wifi', {
    describe: 'Ask device for Nearby WIFI AP list',
    type: 'boolean',
  });
  program.option('verbose', {
    describe: 'Show debugging messages',
    alias: 'v',
    count: true,
  });

  return program;
};

exports.handler = async function (argv) {
  const logger = createLogger({
    levels: config.cli.levels,
    level: verboseLogLevel(argv.verbose),
    format: combine(colorize(), cli()),
    transports: [new transports.Console()],
  });

  const { key, ip } = argv;

  const deviceInfo = await deviceInformation({
    logger,
    key,
    ip,
  });

  const hardware = deviceInfo.system.hardware;
  const firmware = deviceInfo.system.firmware;

  logger.info(
    `Device: ${hardware.type} ${hardware.subType} ${hardware.chipType} (Hardware revision: ${hardware.version}, Firmware version: ${firmware.version})`
  );
  logger.info('MQTT server\t\t' + (firmware.server ? `${firmware.server}:${firmware.port}` : 'not configured'));
  logger.info(`MQTT Username\t\t${hardware.macAddress}`);
  logger.info(`MQTT Password\t\t${computePassword(hardware.macAddress, key)}`);
  logger.info(`MQTT Publish topic\t/appliance/${hardware.uuid}/publish`);
  logger.info(`MQTT Subscribe topic\t/appliance/${hardware.uuid}/subscribe`);

  if (argv['include-wifi']) {
    const wifiList = await deviceWifiList({
      logger,
      key: argv.key,
      ip: argv.ip,
    });

    logger.info('Wifi List:');
    // filter out low signal and empty ssid to keep list short
    const filteredWifiList = wifiList.filter((ap) => ap.signal > 0 && ap.ssid !== '');
    for (const ap of filteredWifiList) {
      logger.info(`${signalStrengthDisplay(ap.signal)} ${base64.decode(ap.ssid)}`);
    }
  }
};

function signalStrengthDisplay(percent) {
  // █▆▄▂
  let str = '▂';

  if (percent > 25) {
    str += '▄';
  }

  if (percent > 50) {
    str += '▆';
  }

  if (percent > 75) {
    str += '█';
  }

  return str.padEnd(4);
}
