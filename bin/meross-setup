const { createLogger, format, transports, config } = require('winston');
const { number } = require('yargs');
const { combine, colorize, cli } = format;

const { configureDeviceTime, configureMqttServers, deviceWifiList } = require('../dist/api.js');
const { base64, verboseLogLevel } = require('../dist/util.js');

exports.command = 'setup [options]';
exports.describe = 'Setup compatable Meross smart device';
exports.builder = (program) => {
  program.option('ip', {
    describe: 'IP address of device you wish to connect to',
    default: '10.10.10.1',
  });
  program.option('key', {
    alias: 'k',
    describe: 'Shared key for generating signatures',
    default: '',
  });
  program.option('mqtt', {
    describe: 'MQTT server address',
    required: true,
  });
  program.option('ap-ssid', {
    describe: 'WIFI AP name',
    required: true,
  });
  program.option('ap-pass', {
    describe: 'WIFI AP password',
  });

  program.option('verbose', {
    describe: 'Show debugging messages',
    alias: 'v',
    count: true,
  });

  return program;
};

exports.handler = async function (argv) {
  const logger = createLogger({
    levels: config.cli.levels,
    level: verboseLogLevel(argv.verbose),
    format: combine(colorize(), cli()),
    transports: [new transports.Console()],
  });

  const { key, ip, apSsid, apPass } = argv;
  let { mqtt } = argv;

  const { timeZone } = Intl.DateTimeFormat().resolvedOptions();
  logger?.debug(`Timezone: ${timeZone}`);

  const timeRules = []; /** @todo */

  // set time
  await configureDeviceTime({
    logger,
    key,
    ip,
    timeZone,
    timeRules,
  });

  if (!Array.isArray(mqtt)) {
    mqtt = [mqtt];
  }
  await configureMqttServers({
    logger,
    key,
    ip,
    mqtt: Array.from(mqtt),
  });

  // fetch AP details from device
  const wifiList = await deviceWifiList({
    logger,
    key: argv.key,
    ip: argv.ip,
  });

  const [ap] = wifiList.filter((ap) => base64.decode(ap.ssid) === apSsid);
  let apChannel, apEncryption, apCipher;
  if (ap) {
    apChannel = ap.channel;
    apEncryption = ap.encryption;
    apCipher = ap.cipher;
  }
};

// const { version } = require('../package.json');
// const program = require('commander');
// const util = require('util');

// const API = require('../lib/api');

// const collection = (value, store = []) => {
//   store.push(value);
//   return store;
// };

// const numberInRange = (min, max) => (value) => {
//   if (value < min || value > max) {
//     throw new program.InvalidOptionArgumentError(`Value is out of range (${min}-${max})`);
//   }
//   return parseInt(value);
// };

// const parseIntWithValidation = (value) => {
//   const i = parseInt(value);
//   if (isNaN(i)) {
//     throw new program.InvalidOptionArgumentError(`Value should be an integer`);
//   }

//   return i;
// };

// program
//   .version(version)
//   .arguments('[options]')
//   .option('-g, --gateway <gateway>', 'Set the gateway address', '10.10.10.1')
//   .option('--wifi-ssid <wifi-ssid>', 'WIFI AP name')
//   .option('--wifi-pass <wifi-pass>', 'WIFI AP password')
//   .option(
//     '--wifi-encryption <wifi-encryption>',
//     'WIFI AP encryption(this can be found using meross info --include-wifi)',
//     parseIntWithValidation
//   )
//   .option(
//     '--wifi-cipher <wifi-cipher>',
//     'WIFI AP cipher (this can be found using meross info --include-wifi)',
//     parseIntWithValidation
//   )
//   .option('--wifi-bssid <wifi-bssid>', 'WIFI AP BSSID (each octet seperated by a colon `:`)')
//   .option(
//     '--wifi-channel <wifi-channel>',
//     'WIFI AP 2.5GHz channel number [1-13] (this can be found using meross info --include-wifi)',
//     numberInRange(1, 13)
//   )
//   .option('--mqtt <mqtt-server>', 'MQTT server address', collection)
//   .option('-u, --user <user-id>', 'Integer id. Only useful for connecting to Meross Cloud.', parseIntWithValidation, 0)
//   .option('-k, --key <shared-key>', 'Shared key for generating signatures', '')
//   .option('-v, --verbose', 'Show debugging messages', '')
//   .parse(process.argv);

// const options = program.opts();
// if (!options.gateway) {
//   console.error('Gateway must be specified');
//   process.exit(1);
// }

// if (!options.wifiSsid) {
//   console.error('WIFI ssid must be specified');
//   process.exit(1);
// }

// if (!options.wifiPass) {
//   console.error('WIFI password must be specified');
//   process.exit(1);
// }

// if (undefined !== options.wifiChannel && isNaN(options.wifiChannel)) {
//   console.error('WIFI channel must be a number between 1-13');
//   process.exit(1);
// }

// if (undefined !== options.wifiEncryption && isNaN(options.wifiEncryption)) {
//   console.error('WIFI encryption must be a number');
//   process.exit(1);
// }

// if (undefined !== options.wifiCipher && isNaN(options.wifiCipher)) {
//   console.error('WIFI cipher must be a number');
//   process.exit(1);
// }

// (async () => {
//   const gateway = options.gateway;
//   const key = options.key;
//   const userId = options.user;
//   const verbose = options.verbose;

//   const api = new API(gateway, key, userId, verbose);

//   console.log(`Setting up device with IP ${gateway}`);
//   if (options.mqtt && options.mqtt.length) {
//     await api.configureMqttServers(options.mqtt);
//   }

//   await api.deviceInformation();

//   await api.configureWifiCredentials({
//     ssid: options.wifiSsid,
//     password: options.wifiPass,
//     channel: options.wifiChannel,
//     encryption: options.wifiEncryption,
//     cipher: options.wifiCipher,
//     bssid: options.wifiBssid,
//   });
//   console.log(`Device will reboot...`);
// })();
